syntax = "proto3";
package terra.market.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "terra/market/v1beta1/market.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/terra-money/core/x/market/types";

// Query defines the gRPC querier service.
service Query {
  // Swap returns simulated swap amount.
  rpc Swap(QuerySwapRequest) returns (QuerySwapResponse) {
    option (google.api.http).get = "/terra/market/v1beta1/swap";
  }

  // MintPoolDelta returns mint_pool_delta amount.
  rpc MintPoolDelta(QueryMintPoolDeltaRequest) returns (QueryMintPoolDeltaResponse) {
    option (google.api.http).get = "/terra/market/v1beta1/mint_pool_delta";
  }

  // BurnPoolDelta returns burn_pool_delta amount.
  rpc BurnPoolDelta(QueryBurnPoolDeltaRequest) returns (QueryBurnPoolDeltaResponse) {
    option (google.api.http).get = "/terra/market/v1beta1/burn_pool_delta";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/terra/market/v1beta1/params";
  }
}

// QuerySwapRequest is the request type for the Query/Swap RPC method.
message QuerySwapRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // offer_coin defines the coin being offered
  cosmos.base.v1beta1.Coin offer_coin = 1 [(gogoproto.nullable) = false];
  // ask_denom defines the denom of the coin to swap to
  string ask_denom = 2;
}

// QuerySwapResponse is the response type for the Query/Swap RPC method.
message QuerySwapResponse {
  // return_coin defines the coin returned as a result of the swap simulation.
  cosmos.base.v1beta1.Coin return_coin = 1 [(gogoproto.nullable) = false];
}

// QueryMintPoolDeltaRequest is the request type for the Query/MintPoolDelta RPC method.
message QueryMintPoolDeltaRequest {}

// QueryMintPoolDeltaResponse is the response type for the Query/MintPoolDelta RPC method.
message QueryMintPoolDeltaResponse {
  // mint_pool_delta defines the gap between the MintPool and the MintBasePool
  bytes mint_pool_delta = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryBurnPoolDeltaRequest is the request type for the Query/BurnPoolDelta RPC method.
message QueryBurnPoolDeltaRequest {}

// QueryBurnPoolDeltaResponse is the response type for the Query/BurnPoolDelta RPC method.
message QueryBurnPoolDeltaResponse {
  // burn_pool_delta defines the gap between the BurnPool and the BurnBasePool
  bytes burn_pool_delta = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}
