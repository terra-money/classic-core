---
swagger: "2.0"
info:
  version: "3.0"
  title: 'Terra-Lite for Terra'
  description: A REST interface for state queries, transaction generation and broadcasting.
tags:
  - name: Tendermint
    description: Tendermint APIs, such as query blocks, transactions and validatorset
  - name: Transaction
    description: Create and broadcast transactions
  - name: Staking
    description: Stake module APIs
  - name: Slashing
    description: Slashing module APIs
  - name: Distribution
    description: Fee distribution module APIs
  - name: Budget
    description: Budget program modules APIs
  - name: Market
    description: Market modules APIs
  - name: Oracle
    description: Get price and voting modules APIs
  - name: Treasury
    description: Treasury modules APIs
  - name: version
    description: Query app version
schemes:
  - https
host: lcd.terra.dev
securityDefinitions:
  kms:
    type: basic
paths:
  /version:
    get:
      summary: Version of Terra-lite
      tags:
        - version
      description: Get the version of terra-lite running locally to compare against expected
      responses:
        200:
          description: Plaintext version i.e. "v0.25.0"
  /node_version:
    get:
      summary: Version of the connected node
      tags:
        - version
      description: Get the version of the SDK running on the connected node to compare against expected
      responses:
        200:
          description: Plaintext version i.e. "v0.25.0"
        500:
          description: failed to query node version
  /node_info:
    get:
      description: Information about the connected node
      summary: The properties of the connected node
      tags:
        - Tendermint
      produces:
        - application/json
      responses:
        200:
          description: Node status
          schema:
            type: object
            properties:
              id:
                type: string
              moniker:
                type: string
                example: validator-name
              protocol_version:
                properties:
                  p2p:
                    type: string
                    example: 7
                  block:
                    type: string
                    example: 10
                  app:
                    type: string
                    example: 0
              network:
                type: string
                example: ricewine-0001
              channels:
                type: string
              listen_addr:
                type: string
                example: 192.168.56.1:26656
              version:
                description: Tendermint version
                type: string
                example: 0.15.0
              other:
                description: more information on versions
                type: object
                properties:
                  tx_index:
                    type: string
                    example: on
                  rpc_address:
                    type: string
                    example: tcp://0.0.0.0:26657
        500:
          description: Failed to query node status
  /syncing:
    get:
      summary: Syncing state of node
      tags:
        - Tendermint
      description: Get if the node is currently syning with other nodes
      responses:
        200:
          description: '"true" or "false"'
        500:
          description: Server internal error
  /blocks/latest:
    get:
      summary: Get the latest block
      tags:
        - Tendermint
      produces:
        - application/json
      responses:
        200:
          description: The latest block
          schema:
            $ref: "#/definitions/BlockQuery"
        500:
          description: Server internal error
  /blocks/{height}:
    get:
      summary: Get a block at a certain height
      tags:
        - Tendermint
      produces:
        - application/json
      parameters:
        - in: path
          name: height
          description: Block height
          required: true
          type: number
          x-example: 1
      responses:
        200:
          description: The block at a specific height
          schema:
            $ref: "#/definitions/BlockQuery"
        404:
          description: Request block height doesn't
        400:
          description: Invalid height
        500:
          description: Server internal error
  /validatorsets/latest:
    get:
      summary: Get the latest validator set
      tags:
        - Tendermint
      produces:
        - application/json
      responses:
        200:
          description: The validator set at the latest block height
          schema:
            type: object
            properties:
              block_height:
                type: number
              validators:
                type: array
                items:
                  $ref: "#/definitions/TendermintValidator"
        500:
          description: Server internal error
  /validatorsets/{height}:
    get:
      summary: Get a validator set a certain height
      tags:
        - Tendermint
      produces:
        - application/json
      parameters:
        - in: path
          name: height
          description: Block height
          required: true
          type: number
          x-example: 1
      responses:
        200:
          description: The validator set at a specific block height
          schema:
            type: object
            properties:
              block_height:
                type: number
              validators:
                type: array
                items:
                  $ref: "#/definitions/TendermintValidator"
        404:
          description: Block at height not available
        400:
          description: Invalid height
        500:
          description: Server internal error
  /txs/{hash}:
    get:
      summary: Get a Tx by hash
      tags:
        - Tendermint
      produces:
        - application/json
      parameters:
        - in: path
          name: hash
          description: Tx hash
          required: true
          type: string
          x-example: 88D6B85EAB87D43CDF50F39C22FC2237A37FEDC4CE723200AD0AF48CBEDBC317
      responses:
        200:
          description: Tx with the provided hash
          schema:
            $ref: "#/definitions/TxQuery"
        500:
          description: Internal Server Error
  /txs:
    get:
      tags:
        - Tendermint
      summary: Search transactions
      description: Search transactions by tag(s).
      produces:
        - application/json
      parameters:
        - in: query
          name: tag
          type: string
          description: "transaction tags such as 'action=submit-proposal' and 'sender=terra1ca8etp65w8ewl4zh0gfjxtg3txknu6wqe2fet0' which results in the following endpoint: 'GET /txs?action=submit-proposal&sender=terra1ca8etp65w8ewl4zh0gfjxtg3txknu6wqe2fet0'"
          required: true
          x-example: 'TODO'
        - in: query
          name: page
          description: Page number
          type: integer
          x-example: 1
        - in: query
          name: limit
          description: Maximum number of items per page
          type: integer
          x-example: 1
      responses:
        200:
          description: All txs matching the provided tags
          schema:
            $ref: "#/definitions/PaginatedQueryTxs"
        400:
          description: Invalid search tags
        500:
          description: Internal Server Error
    post:
      tags:
        - Tendermint
      summary: Broadcast a signed tx
      description: Broadcast a signed tx to a full node
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: txBroadcast
          description: The tx must be a signed StdTx. The supported broadcast modes include `"block"`(return after tx commit), `"sync"`(return afer CheckTx) and `"async"`(return right away).
          required: true
          schema:
            type: object
            properties:
              tx:
                $ref: "#/definitions/StdTx"
              mode:
                type: string
                example: block
      responses:
        200:
          description: Tx broadcasting result
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        500:
          description: Internal Server Error
  /txs/encode:
    post:
      tags:
        - Transaction
      summary: Encode a transaction to the Amino wire format
      description: Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tx
          description: The tx to encode
          required: true
          schema:
            type: object
            properties:
              tx:
                $ref: "#/definitions/StdTx"
      responses:
        200:
          description: The tx was successfully decoded and re-encoded
          schema:
            type: object
            properties:
              tx:
                type: string
                example: The base64-encoded Amino-serialized bytes for the tx
        400:
          description: The tx was malformated
        500:
          description: Server internal error  
  /bank/balances/{address}:
    get:
      summary: Get the account balances
      tags:
        - Transaction
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address in bech32 format
          required: true
          type: string
          x-example: terra16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
      responses:
        200:
          description: Account balances
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        204:
          description: There is no data for the requested account
        500:
          description: Server internal error
  /bank/accounts/{address}/transfers:
    post:
      summary: Send coins from one account to another
      tags:
        - Transaction
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address in bech32 format
          required: true
          type: string
          x-example: terra16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
        - in: body
          name: account
          description: The sender and tx information
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              amount:
                type: array
                items:
                  $ref: "#/definitions/Coin"
      responses:
        202:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /auth/accounts/{address}:
    get:
      summary: Get the account information on blockchain
      tags:
        - Keys
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address
          required: true
          type: string
          x-example: terra16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
      responses:
        200:
          description: Account information on the blockchain (one of Account and GradedVestingAccount)
          schema:
            type: object
            properties:
              Account:
                $ref: "#/definitions/Account"
              GradedVestingAccount:
                $ref: "#/definitions/GradedVestingAccount"
                
          
        204:
          description: No content about this account address
        500:
          description: Server internel error
  /auth/accounts/{address}/multisign:
    post:
      summary: "Generate multisig signatures for transactions generated offline"
      tags:
        - Keys
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address
          required: true
          type: string
          x-example: terra16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
        - in: body
          name: multisig_req
          description: multisign request information
          required: true
          schema:
            $ref: "#/definitions/MultiSignReq"
      responses:
        200:
          description: Generated multisigned tx or multisig
          schema:
            type: object
            properties:
              MultiSignedTx:
                $ref: "#/definitions/StdTx"
              MultiSig:
                $ref: "#/definitions/StdSignature"
        500:
          description: Server internel error
  /staking/delegators/{delegatorAddr}/delegations:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get all delegations from a delegator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Delegation"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Submit delegation
      parameters:
        - in: body
          name: delegation
          description: The password of the account to remove from the KMS
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              delegator_address:
                $ref: "#/definitions/Address"
              validator_address:
                $ref: "#/definitions/ValidatorAddress"
              delegation:
                $ref: "#/definitions/Coin"
      tags:
        - Staking
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address or delegation request body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/delegations/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query the current delegation between a delegator and a validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Delegation"
        400:
          description: Invalid delegator address or validator address
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/unbonding_delegations:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get all unbonding delegations from a delegator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UnbondingDelegation"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Submit an unbonding delegation
      parameters:
        - in: body
          name: delegation
          description: The password of the account to remove from the KMS
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              delegator_address:
                $ref: "#/definitions/Address"
              validator_address:
                $ref: "#/definitions/ValidatorAddress"
              shares:
                type: string
                example: "100"
      tags:
        - Staking
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address or unbonding delegation request body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query all unbonding delegations between a delegator and a validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UnbondingDelegation"
        400:
          description: Invalid delegator address or validator address
        500:
          description: Internal Server Error
  /staking/redelegations:
    parameters:
      - in: query
        name: delegator
        description: Bech32 AccAddress of Delegator
        required: false
        type: string
      - in: query
        name: validator_from
        description: Bech32 ValAddress of SrcValidator
        required: false
        type: string
      - in: query
        name: validator_to
        description: Bech32 ValAddress of DstValidator
        required: false
        type: string
    get:
      summary: Get all redelegations (filter by query params)
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Redelegation"
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/redelegations:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    post:
      summary: Submit a redelegation
      parameters:
        - in: body
          name: delegation
          description: The sender and tx information
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              delegator_address:
                $ref: "#/definitions/Address"
              validator_src_addressess:
                $ref: "#/definitions/ValidatorAddress"
              validator_dst_address:
                $ref: "#/definitions/ValidatorAddress"
              shares:
                type: string
                example: "100"
      tags:
        - Staking
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid delegator address or redelegation request body
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/validators:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Query all validators that a delegator is bonded to
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Validator"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/validators/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 ValAddress of Delegator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query a validator that a delegator is bonded to
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        400:
          description: Invalid delegator address or validator address
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/txs:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get all staking txs (i.e msgs) from a delegator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/TxQuery"
        204:
          description: No staking transaction about this delegator address
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
  /staking/validators:
    get:
      summary: Get all validator candidates. By default it returns only the bonded validators.
      parameters:
        - in: query
          name: status
          type: string
          description: The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
          x-example: bonded
        - in: query
          name: page
          description: The page number.
          type: integer
          x-example: 1
        - in: query
          name: limit
          description: The maximum number of items per page.
          type: integer
          x-example: 1
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Validator"
        500:
          description: Internal Server Error
  /staking/validators/{validatorAddr}:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query the information from a single validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /staking/validators/{validatorAddr}/delegations:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Get all delegations from a validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Delegation"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /staking/validators/{validatorAddr}/unbonding_delegations:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Get all unbonding delegations from a validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UnbondingDelegation"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /staking/pool:
    get:
      summary: Get the current state of the staking pool
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              loose_tokens:
                type: string
              bonded_tokens:
                type: string
              inflation_last_time:
                type: string
              inflation:
                type: string
              date_last_commission_reset:
                type: string
              prev_bonded_shares:
                type: string
        500:
          description: Internal Server Error
  /staking/params:
    get:
      summary: Get the current staking parameter values
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              inflation_rate_change:
                type: string
              inflation_max:
                type: string
              inflation_min:
                type: string
              goal_bonded:
                type: string
              unbonding_time:
                type: string
              max_validators:
                type: integer
              bond_denom:
                type: string
        500:
          description: Internal Server Error
  /slashing/validators/{validatorPubKey}/signing_info:
    get:
      summary: Get sign info of given validator
      description: Get sign info of given validator
      produces:
        - application/json
      tags:
        - Slashing
      parameters:
        - type: string
          description: Bech32 validator public key
          name: validatorPubKey
          required: true
          in: path
          x-example: terravalconspub1zcjduepq7mft6gfls57a0a42d7uhx656cckhfvtrlmw744jv4q0mvlv0dypskehfk8
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/SigningInfo"
        204:
          description: No sign info of this validator
        400:
          description: Invalid validator public key
        500:
          description: Internal Server Error
  /slashing/signing_infos:
    get:
      summary: Get sign info of given all validators
      description: Get sign info of all validators
      produces:
        - application/json
      tags:
        - Slashing
      parameters:
        - in: query
          name: page
          description: Page number
          type: integer
          required: true
          x-example: 1
        - in: query
          name: limit
          description: Maximum number of items per page
          type: integer
          required: true
          x-example: 5
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/SigningInfo"
        204:
          description: No validators with sign info
        400:
          description: Invalid validator public key for one of the validators
        500:
          description: Internal Server Error
  /slashing/validators/{validatorAddr}/unjail:
    post:
      summary: Unjail a jailed validator
      description: Send transaction to unjail a jailed validator
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Slashing
      parameters:
        - type: string
          description: Bech32 validator address
          name: validatorAddr
          required: true
          in: path
          x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
        - description: ""
          name: UnjailBody
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/StdTx"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid validator address or base_req
        500:
          description: Internal Server Error
  /slashing/parameters:
    get:
      summary: Get the current slashing parameters
      tags:
        - Slashing
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              max_evidence_age:
                type: integer
              signed_blocks_window:
                type: integer
              min_signed_per_window:
                type: integer
              double_sign_unbond_duration:
                type: integer
              downtime_unbond_duration:
                type: integer
              slash_fraction_double_sign:
                type: integer
              slash_fraction_downtime:
                type: integer
        500:
          description: Internal Server Error
  /distribution/delegators/{delegatorAddr}/rewards:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get the total rewards balance from all delegations
      description: Get the sum of all the rewards earned by delegations by a single delegator
      produces:
        - application/json
      tags:
        - Distribution
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DelegatorTotalRewards"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Withdraw all the delegator's delegation rewards
      description: Withdraw all the delegator's delegation rewards
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query a delegation reward
      description: Query a single delegation reward by a delegator
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Withdraw a delegation reward
      description: Withdraw a delegator's delegation reward from a single validator
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address or delegation body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/delegators/{delegatorAddr}/withdraw_address:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: terra167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get the rewards withdrawal address
      description: Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Address"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Replace the rewards withdrawal address
      description: Replace the delegations' rewards withdrawal address for a new one.
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              withdraw_address:
                $ref: "#/definitions/Address"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator or withdraw address
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/validators/{validatorAddr}:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Validator distribution information
      description: Query the distribution information of a single validator
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ValidatorDistInfo"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /distribution/validators/{validatorAddr}/outstanding_rewards:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terravaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Fee distribution outstanding rewards of a single validator
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /distribution/validators/{validatorAddr}/rewards:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: terra1ca8etp65w8ewl4zh0gfjxtg3txknu6wqe2fet0
    get:
      summary: Commission and self-delegation rewards of a single validator
      description: Query the commission and self-delegation rewards of validator.
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
    post:
      summary: Withdraw the validator's rewards
      description: Withdraw the validator's self-delegation and commissions rewards
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid validator address
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/community_pool:
    get:
      summary: Community pool parameters
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /distribution/params:
    get:
      summary: Fee distribution parameters
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            properties:
              base_proposer_reward:
                type: string
              bonus_proposer_reward:
                type: string
              community_tax:
                type: string
        500:
          description: Internal Server Error
  /budget/programs/submit:
    post:
      summary: Posting new budget program
      tags:
        - Budget
      produces:
        - application/json
      parameters:
        - in: body
          name: Post Program request body
          schema:
            $ref: "#/definitions/submitProgramReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/programs/{programId}/withdraw:
    post:
      summary: Send withdraw request
      tags:
        - Budget
      produces:
        - application/json
      parameters:
        - in: path
          name: programId
          description: Program ID
          required: true
          type: integer
        - in: body
          name: Post Withdraw request body
          schema:
            $ref: "#/definitions/withdrawReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/programs/{programId}/votes:
    parameters:
      - in: path
        name: programId
        description: Program ID
        required: true
        type: integer
    post:
      summary: Vote to the program by programId
      tags:
        - Budget
      produces:
        - application/json
      parameters:
        - in: body
          name: Budget Vote request body
          schema:
            $ref: "#/definitions/budgetVoteReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    get:
      summary: Get the budget program voting records of a denom
      tags:
        - Budget
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/MsgVoteProgram"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/programs/{programID}/votes/{voter}:
    parameters:
      - in: path
        name: programID
        description: Program ID to get
        required: true
        type: integer
      - in: path
        name: voter
        description: Bech32 OperatorAddress of voter
        required: true
        type: string
    get:
      summary: Get the budget program voting record of RestVoter
      tags:
        - Budget
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/MsgVoteProgram"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/programs/actives:
    get:
      summary: Get active budget programs
      tags:
        - Budget
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Program"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/programs/candidates:
    get:
      summary: Get candidate budget programs
      tags:
        - Budget
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Program"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/programs/{programId}:
    get:
      summary: Get a budget program by program-id
      tags:
        - Budget
      produces:
        - application/json
      parameters:
        - in: path
          name: programId
          description: Program ID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Program"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /budget/params:
    get:
      summary: Get budget params
      tags:
        - Budget
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BudgetParams"
        404:
          description: Not Found
  /market/swap:
    post:
      summary: Swap coin with another coin
      tags:
        - Market
      produces:
        - application/json
      parameters:
        - in: body
          name: Swap coin request body
          schema:
            $ref: "#/definitions/SwapReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StdTx"
        500:
          description: Internal Server Error
    get:
      summary: Query swap result amount
      tags:
        - Market
      produces:
        - application/json
      parameters:
        - in: query
          name: offer_coin
          description: coin expression want to swap
          type: string
          required: true
          x-example: 1000000uluna
        - in: query
          name: ask_denom
          description: Then coin denom want to ask
          type: string
          required: true
          x-example: usdr
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /market/params:
    get:
      summary: Get market params
      tags:
        - Market
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/MarketParams"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/denoms/{denom}/votes:
    post:
      summary: Generate oracle price vote message containing price and salt for an prevote
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to vote
          required: true
          type: string
        - in: body
          name: Vote request body
          schema:
            $ref: "#/definitions/VoteReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Bad request
        500:
          description: Internal Server Error
    get:
      summary: Request to get the currently unelected outstanding price oracle vote
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to get
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PriceVote"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/denoms/{denom}/votes/{voter}:
    get:
      summary: Request to get the currently unelected outstanding price oracle vote
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to get
          required: true
          type: string
        - in: path
          name: voter
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PriceVote"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/denoms/{denom}/prevotes:
    post:
      summary: Generate oracle price prevote message containing hash of an vote
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to prevote
          required: true
          type: string
        - in: body
          name: Vote request body
          schema:
            $ref: "#/definitions/PrevoteReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Bad request
        500:
          description: Internal Server Error
    get:
      summary: Request to get the currently outstanding price oracle prevote
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to get
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PricePrevote"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/denoms/{denom}/prevotes/{voter}:
    get:
      summary: Request to get the currently outstanding price oracle prevote
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to get
          required: true
          type: string
        - in: path
          name: voter
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PricePrevote"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/denoms/{denom}/price:
    get:
      summary: Get the current effective price in Luna for the asset
      tags:
        - Oracle
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: The coin denom to get
          required: true
          type: string
      responses:
        200:
          description: current price of denom i.e. "1000.0"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/denoms/actives:
    get:
      summary: Get all activated Coins
      tags:
        - Oracle
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
            example: ["terra", "luna"]
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /oracle/params:
    get:
      summary: Get oracle params
      tags:
        - Oracle
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/OracleParams"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /treasury/tax-rate:
    get:
      summary: Get current tax rate
      tags:
        - Treasury
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: number
            format: float
            example: "0.05"
        500:
          description: Internal Server Error
  /treasury/tax-rate/{epoch}:
    get:
      summary: Get tax rate at epoch
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: epoch
          description: Epoch number
          required: true
          type: number
      responses:
        200:
          description: OK
          schema:
            type: number
            format: float
            example: "0.05"
        500:
          description: Internal Server Error
  /treasury/tax-cap/{denom}:
    get:
      summary: Get tax cap of the denom
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: Denom
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: integer
            example: "100000"
        404:
          description: Not Found
  /treasury/reward-weight:
    get:
      summary: Get current reward weight
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: epoch
          description: Epoch number
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: number
            example: "5"
            description: 5%
        500:
          description: Internal Server Error
  /treasury/reward-weight/{denom}:
    get:
      summary: Get reward weight at epoch
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: Denom
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: number
            example: "5"
            description: 5%
        500:
          description: Internal Server Error
  /treasury/issuance/{denom}:
    get:
      summary: Get total issuance count of denom
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: Denom to get
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: integer
            example: "500"
        500:
          description: Internal Server Error
  /treasury/tax-proceeds:
    get:
      summary: Get current tax proceeds
      tags:
        - Treasury
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /treasury/tax-proceeds/{epoch}:
    get:
      summary: Get tax proceeds at epoch
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: epoch
          description: Epoch number
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /treasury/seigniorage-proceeds:
    get:
      summary: retrieves the size of the seigniorage pool
      tags:
        - Treasury
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: integer
            example: "0"
        500:
          description: Internal Server
  /treasury/seigniorage-proceeds/{epoch}:
    get:
      summary: retrieves the size of the seigniorage pool at epoch
      tags:
        - Treasury
      produces:
        - application/json
      parameters:
        - in: path
          name: epoch
          description: Epoch number
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: integer
            example: "0"
        500:
          description: Internal Server Error
  /treasury/active-claims:
    get:
      summary: Get all active Claims
      tags:
        - Treasury
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Claim"
        404:
          description: Not Found
  /treasury/current-epoch:
    get:
      summary: Get current epoch
      tags:
        - Treasury
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: number
            example: "724"
        404:
          description: Not Found
  /treasury/params:
    get:
      summary: Get treasury module params
      tags:
        - Treasury
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/TreasuryParams"
        404:
          description: Not Found
definitions:
  CheckTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          $ref: "#/definitions/KVPair"
    example:
      code: 0
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ""
        - ""
  DeliverTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          $ref: "#/definitions/KVPair"
    example:
      code: 5
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ""
        - ""
  BroadcastTxCommitResult:
    type: object
    properties:
      check_tx:
        $ref: "#/definitions/CheckTxResult"
      deliver_tx:
        $ref: "#/definitions/DeliverTxResult"
      hash:
        $ref: "#/definitions/Hash"
      height:
        type: integer
  KVPair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  Msg:
    type: string
  Address:
    type: string
    description: bech32 encoded address
    example: terra1ca8etp65w8ewl4zh0gfjxtg3txknu6wqe2fet0
  ValidatorAddress:
    type: string
    description: bech32 encoded address
    example: terravaloper1ca8etp65w8ewl4zh0gfjxtg3txknu6wqe99ymu
  Coin:
    type: object
    properties:
      denom:
        type: string
        example: luna
      amount:
        type: string
        example: "50"
  Hash:
    type: string
    example: EE5F3404034C524501629B56E0DDC38FAD651F04
  TxQuery:
    type: object
    properties:
      hash:
        type: string
        example: "D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656"
      height:
        type: number
        example: 368
      tx:
        $ref: "#/definitions/StdTx"
      result:
        type: object
        properties:
          log:
            type: string
          gas_wanted:
            type: string
            example: "200000"
          gas_used:
            type: string
            example: "26354"
          tags:
            type: array
            items:
              $ref: "#/definitions/KVPair"
  PaginatedQueryTxs:
    type: object
    properties:
      total_count:
        type: number
        example: 1
      count:
        type: number
        example: 1
      page_number:
        type: number
        example: 1
      page_total:
        type: number
        example: 1
      limit:
        type: number
        example: 30
      txs:
        type: array
        items:
          $ref: "#/definitions/TxQuery"
  StdSignature:
    type: object
    properties:
      signature:
        type: string
        example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
      pub_key:
        type: object
        properties:
          type:
            type: string
            example: "tendermint/PubKeySecp256k1"
          value:
            type: string
            example: "Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH"
  StdTx:
    type: object
    properties:
      msg:
        type: array
        items:
          $ref: "#/definitions/Msg"
      fee:
        type: object
        properties:
          gas:
            type: string
          amount:
            type: array
            items:
              $ref: "#/definitions/Coin"
      memo:
        type: string
      signatures:
        type: array
        items:
          $ref: "#/definitions/StdSignature"
  UnsignedStdTx:
    type: object
    properties:
      msg:
        type: array
        items:
          $ref: "#/definitions/Msg"
      fee:
        type: object
        properties:
          gas:
            type: string
          amount:
            type: array
            items:
              $ref: "#/definitions/Coin"
      memo:
        type: string
      signatures:
        type: string
        example: null
  BlockID:
    type: object
    properties:
      hash:
        $ref: "#/definitions/Hash"
      parts:
        type: object
        properties:
          total:
            type: number
            example: 0
          hash:
            $ref: "#/definitions/Hash"
  BlockHeader:
    type: object
    properties:
      chain_id:
        type: string
        example: ricewine-0001
      height:
        type: number
        example: 1
      time:
        type: string
        example: "2017-12-30T05:53:09.287+01:00"
      num_txs:
        type: number
        example: 0
      last_block_id:
        $ref: "#/definitions/BlockID"
      total_txs:
        type: number
        example: 35
      last_commit_hash:
        $ref: "#/definitions/Hash"
      data_hash:
        $ref: "#/definitions/Hash"
      validators_hash:
        $ref: "#/definitions/Hash"
      next_validators_hash:
        $ref: "#/definitions/Hash"
      consensus_hash:
        $ref: "#/definitions/Hash"
      app_hash:
        $ref: "#/definitions/Hash"
      last_results_hash:
        $ref: "#/definitions/Hash"
      evidence_hash:
        $ref: "#/definitions/Hash"
      proposer_address:
        $ref: "#/definitions/Address"
      version:
        type: object
        properties:
          block:
            type: string
            example: 10
          app:
            type: string
            example: 0
  Block:
    type: object
    properties:
      header:
        $ref: "#/definitions/BlockHeader"
      txs:
        type: array
        items:
          type: string
      evidence:
        type: array
        items:
          type: string
      last_commit:
        type: object
        properties:
          block_id:
            $ref: "#/definitions/BlockID"
          precommits:
            type: array
            items:
              type: object
              properties:
                validator_address:
                  type: string
                validator_index:
                  type: string
                  example: "0"
                height:
                  type: string
                  example: "0"
                round:
                  type: string
                  example: "0"
                timestamp:
                  type: string
                  example: "2017-12-30T05:53:09.287+01:00"
                type:
                  type: number
                  example: 2
                block_id:
                  $ref: "#/definitions/BlockID"
                signature:
                  type: string
                  example: "7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ=="
  BlockQuery:
    type: object
    properties:
      block_meta:
        type: object
        properties:
          header:
            $ref: "#/definitions/BlockHeader"
          block_id:
            $ref: "#/definitions/BlockID"
      block:
        $ref: "#/definitions/Block"
  DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        $ref: "#/definitions/ValidatorAddress"
      reward:
        type: array
        items:
          $ref: "#/definitions/Coin"
  DelegatorTotalRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          $ref: "#/definitions/DelegationDelegatorReward"
      total:
        type: array
        items:
          $ref: "#/definitions/Coin"
  BaseReq:
    type: object
    properties:
      from:
        type: string
        example: "terra1ca8etp65w8ewl4zh0gfjxtg3txknu6wqe2fet0"
        description: Sender address or Keybase name to generate a transaction
      memo:
        type: string
        example: "Sent via Terra Voyager 🚀"
      chain_id:
        type: string
        example: "ricewine-0001"
      account_number:
        type: string
        example: "0"
      sequence:
        type: string
        example: "1"
      gas:
        type: string
        example: "200000"
      gas_adjustment:
        type: string
        example: "1.2"
      fees:
        type: array
        items:
          $ref: "#/definitions/Coin"
      simulate:
        type: boolean
        example: false
        description: Estimate gas for a transaction (cannot be used in conjunction with generate_only)
            
  BaseAccount:
    type: object
    properties:
      account_number:
        type: string
      address:
        type: string
      coins:
        type: array
        items:
          $ref: "#/definitions/Coin"
      public_key:
        type: string
      sequence:
        type: string
        
  Account:
    type: object
    properties:
      type:
        type: string
        example: "auth/Account"
      value:
        $ref: "#/definitions/BaseAccount"
  
  BaseVestingAccount:
    type: object
    properties:
      BaseAccount:
        $ref: "#/definitions/BaseAccount"
      original_vesting:
        type: array
        items:
          $ref: "#/definitions/Coin"
      delegated_free:
        type: array
        items:
          $ref: "#/definitions/Coin"
      delegated_vesting:
        type: array
        items:
          $ref: "#/definitions/Coin"
      end_time:
        type: string
        example: "0"

  Schedule:
    type: object
    properties:
      cliff:
        type: string
        example: "1556085600"
      ratio:
        type: string
        example: "0.100000000000000000"

  VestingSchedule:
    type: object
    properties:
      denom:
        type: string
        example: "usdr"
      schedules:
        type: array
        items:
          $ref: "#/definitions/Schedule"

  BaseGradedVestingAccount:
    type: object
    properties:
      BaseVestingAccount:
        $ref: "#/definitions/BaseVestingAccount"
      vesting_schedules:
        type: array
        items:
          $ref: "#/definitions/VestingSchedule"
        
        
  GradedVestingAccount:
    type: object
    properties:
      type:
        type: string
        example: "core/GradedVestingAccount"
      value:
        $ref: "#/definitions/BaseGradedVestingAccount"
        
  TendermintValidator:
    type: object
    properties:
      address:
        $ref: "#/definitions/ValidatorAddress"
      pub_key:
        type: string
        example: terravalconspub1zcjduepq5zuq4cp0cpfyx6rca6ygz38t446wp3hlp5lepyle4e6e00twmetqsa0vg4
      voting_power:
        type: string
        example: "1000"
      proposer_priority:
        type: string
        example: "1000"
  Validator:
    type: object
    properties:
      operator_address:
        $ref: "#/definitions/ValidatorAddress"
      consensus_pubkey:
        type: string
        example: terravalconspub1zcjduepq5zuq4cp0cpfyx6rca6ygz38t446wp3hlp5lepyle4e6e00twmetqsa0vg4
      jailed:
        type: boolean
      status:
        type: integer
      tokens:
        type: string
      delegator_shares:
        type: string
      description:
        type: object
        properties:
          moniker:
            type: string
          identity:
            type: string
          website:
            type: string
          details:
            type: string
      bond_height:
        type: string
        example: "0"
      bond_intra_tx_counter:
        type: integer
        example: "0"
      unbonding_height:
        type: string
        example: "0"
      unbonding_time:
        type: string
        example: "1970-01-01T00:00:00Z"
      commission:
        type: object
        properties:
          rate:
            type: string
            example: "0"
          max_rate:
            type: string
            example: "0"
          max_change_rate:
            type: string
            example: "0"
          update_time:
            type: string
            example: "1970-01-01T00:00:00Z"
  Delegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      shares:
        type: string
      height:
        type: integer
  UnbondingDelegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      initial_balance:
        type: string
      balance:
        type: string
      creation_height:
        type: integer
      min_time:
        type: integer
  Redelegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_src_address:
        type: string
      validator_dst_address:
        type: string
      creation_height:
        type: integer
      min_time:
        type: integer
      initial_balance:
        type: string
      balance:
        type: string
      shares_src:
        type: string
      shares_dst:
        type: string
  ValidatorDistInfo:
    type: object
    properties:
      operator_address:
        $ref: "#/definitions/ValidatorAddress"
      self_bond_rewards:
        type: array
        items:
          $ref: "#/definitions/Coin"
      val_commission:
        type: array
        items:
          $ref: "#/definitions/Coin"
  SigningInfo:
    type: object
    properties:
      start_height:
        type: string
      index_offset:
        type: string
      jailed_until:
        type: string
      missed_blocks_counter:
        type: string
  SwapReq:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
      offer_coin:
        $ref: "#/definitions/Coin"
      ask_denom:
        type: string
        example: luna
  PrevoteReq:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
      price:
        type: number
        example: "1000.0"
        description: "price of Luna in denom currency is to make provte hash; this field is required to submit prevote in case absense of hash"
      salt:
        type: string
        example: "abcd"
        description: "salt is to make prevote hash; this field is required to submit prevote in case  absense of hash"
      hash:
        type: string
        example: "061bf1e27dfff121f40c826e593c8a28ec299a02"
        description: "hex string; hash of next vote; empty == skip prevote"
      validator:
        $ref: "#/definitions/ValidatorAddress"
  VoteReq:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
      price:
        type: number
        example: "1000.0"
        description: "proof price of Luna in denom currency was used to make prevote hash; initial prevote does not require this field"
      salt:
        type: string
        example: "abcd"
        description: "proof salt was used to make prevote hash; initial prevote does not require this field"
      validator:
        $ref: "#/definitions/ValidatorAddress"
  budgetVoteReq:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
      option:
        type: boolean
  PriceVote:
    type: object
    properties:
      price:
        type: number
        example: "0.01241"
      denom:
        type: string
        example: "ukrt"
      voter:
        $ref: "#/definitions/ValidatorAddress"
  PricePrevote:
    type: object
    properties:
      hash:
        type: string
        example: "061bf1e27dfff121f40c826e593c8a28ec299a02"
      denom:
        type: string
        example: "uusd"
      voter:
        $ref: "#/definitions/ValidatorAddress"
      submit_block:
        type: number
        example: "1"
  submitProgramReq:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
      title:
        type: string
        example: "title"
      description:
        type: string
        example: "description"
      executor:
        $ref: "#/definitions/Address"
  withdrawReq:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
  Program:
    type: object
    properties:
      program_id:
        type: number
      title:
        type: string
      description:
        type: string
      submitter:
        $ref: "#/definitions/Address"
      executor:
        $ref: "#/definitions/Address"
      submit_time:
        type: number
  MsgVoteProgram:
    type: object
    properties:
      program_id:
        type: number
      option:
        type: boolean
      voter:
        $ref: "#/definitions/Address"
  BudgetParams:
    type: object
    properties:
      active_threshold:
        type: number
        example: "0.1"
      legacy_threshold:
        type: number
        example: "0.00"
      vote_period:
        type: number
        example: "1000000"
      deposit:
        $ref: "#/definitions/Coin"
  MarketParams:
    type: object
    properties:
      daily_luna_delta_limit:
        type: number
        example: "0.005"
      min_swap_spread:
        type: number
        example: "0.02"
      max_swap_spread:
        type: number
        example: "0.1"
  OracleParams:
    type: object
    properties:
      vote_period:
        type: number
        example: "900"
      vote_threshold:
        type: number
        example: "0.67"
      drop_threshold:
        type: number
        example: "10"
      oracle_reward_band:
        type: number
        example: "0.02"
  Claim:
    type: object
    properties:
      class:
        type: string
        example: ["oracle", "budget"]
      weight:
        type: integer
        example: "100"
      recipient:
        $ref: "#/definitions/Address"
  PolicyConstraints:
    type: object
    properties:
      rate_min:
        type: number
        format: float
        example: "0.0005"
        description: "0.05%"
      rate_max:
        type: number
        format: float
        example: "0.01"
        description: "1%"
      cap:
        $ref: "#/definitions/Coin"
      change_max:
        type: number
        format: float
        example: "0.00025"
        description: "0.025%"
  TreasuryParams:
    type: object
    properties:
      tax_policy:
        $ref: "#/definitions/PolicyConstraints"
      reward_policy:
        $ref: "#/definitions/PolicyConstraints"
      seigniorage_burden_target:
        type: number
        format: float
        example: "0.67"
        description: "67%"
      mining_increment:
        type: number
        format: float
        example: "1.07"
      window_short:
        type: integer
        example: "4"
      window_long:
        type: integer
        example: "52"
      window_probation:
        type: integer
        example: "12"
      oracle_share:
        type: number
        format: float
        example: "0.1"
      budget_share:
        type: number
        format: float
        example: "0.9"
  MultiSignReq:
    type: object
    properties:
      tx:
        $ref: "#/definitions/UnsignedStdTx"
      chain_id:
        type: string
        example: "columbus-2"
      signatures:
        type: array
        items:
          $ref: "#/definitions/StdSignature"
      signature_only:
        type: boolean