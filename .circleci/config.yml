version: 2.1

defaults: &linux_defaults
  working_directory: /go/src/core
  docker:
    - image: circleci/golang:1.12.3
  environment:
    GOBIN: /tmp/workspace/bin

deps: &dependencies
  run:
    name: dependencies
    command: |
      export PATH="$GOBIN:$PATH"

refs:
  filter_only_branches: &filter_only_branches
    filters:
      branches:
        only: /^(develop|master).*/
      tags:
        only: /v[0-9]+(\.[0-9]+)*(-.*)*/

jobs:
  setup_dependencies:
    <<: *linux_defaults
    steps:
      - run: mkdir -p /tmp/workspace/bin
      - run: mkdir -p /tmp/workspace/profiles
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: tools
          command: |
            export PATH="$GOBIN:$PATH"
            make get_tools
      - *dependencies
      - run:
          name: binaries
          command: |
            export PATH="$GOBIN:$PATH"
            make go-mod-cache
            make install
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - bin
            - profiles

  lint:
    <<: *linux_defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - *dependencies
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Lint source
          command: |
            export PATH="$GOBIN:$PATH"
            make ci-lint

  test_cover:
    <<: *linux_defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - *dependencies
      - run: mkdir -p /tmp/logs
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Run tests
          command: |
            export PATH="$GOBIN:$PATH"
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            for pkg in $(go list ./... | grep -v github.com/terra-project/core/cmd/terra/cli_test | grep -v '/simulation'); do
              id=$(echo "$pkg" | sed 's|[/.]|_|g')
              go test -mod=readonly -timeout 8m -race -coverprofile=/tmp/workspace/profiles/$id.out -covermode=atomic -tags='ledger test_ledger_mock' "$pkg" | tee "/tmp/logs/$id-$RANDOM.log"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "profiles/*"
      - store_artifacts:
          path: /tmp/logs

  release:
    docker:
      - image: circleci/golang:1.12.5
    steps:
      - checkout
      - run:
          name: release
          command: |
            export BUILD_TAGS="netgo ledger"
            export GOSUM=$(sha256sum go.sum | cut -d ' ' -f1)
            curl -sL https://git.io/goreleaser | bash

  upload_coverage:
    <<: *linux_defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - *dependencies
      - run:
          name: gather
          command: |
            set -ex
            echo "--> Concatenating profiles:"
            ls /tmp/workspace/profiles/
            echo "mode: atomic" > coverage.txt
            for prof in $(ls /tmp/workspace/profiles/); do
              tail -n +2 /tmp/workspace/profiles/"$prof" >> coverage.txt
            done
      - run:
          name: filter out DONTCOVER
          command: |
            excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER' | xargs realpath --relative-to=$GOPATH/src)"
            for filename in ${excludelist}; do
              echo "Excluding ${filename} ..."
              sed -i "\%${filename}:%d" coverage.txt
            done
      - run:
          name: upload
          command: bash <(curl -s https://codecov.io/bash) -f coverage.txt

  docker_image:
    <<: *linux_defaults
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            TERRA_VERSION="stable"
          elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
            TERRA_VERSION="develop"
          else
            TERRA_VERSION=`/tmp/workspace/bin/terrad version`
          fi
          docker build -t ${AWS_RESOURCE_NAME_PREFIX}:${TERRA_VERSION} .
          mkdir -p docker-image
          docker save -o docker-image/image.tar ${AWS_RESOURCE_NAME_PREFIX}:${TERRA_VERSION}
      - persist_to_workspace:
          root: .
          paths: docker-image

  push_to_ecr:
    docker:
      - image: wilson208/circleci-awscli
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            TERRA_VERSION="stable"
          elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
            TERRA_VERSION="develop"
          else
            TERRA_VERSION=`/tmp/workspace/bin/terrad version`
          fi
          eval $(aws --region ${AWS_DEFAULT_REGION} ecr --no-include-email get-login)
          docker load --input /tmp/workspace/docker-image/image.tar
          docker tag ${AWS_RESOURCE_NAME_PREFIX}:${TERRA_VERSION} ${AWS_ECR_URL}/${AWS_RESOURCE_NAME_PREFIX}:${TERRA_VERSION}
          docker push ${AWS_ECR_URL}/${AWS_RESOURCE_NAME_PREFIX}:${TERRA_VERSION}

  localnet:
    working_directory: /home/circleci/.go_workspace/src/core
    machine:
      image: circleci/classic:latest
    environment:
      GOBIN: /home/circleci/.go_workspace/bin
      GOPATH: /home/circleci/.go_workspace/
      GOOS: linux
      GOARCH: amd64
      GO_VERSION: "1.11.5"
    parallelism: 1

    steps:
      - checkout
      - run:
          name: run localnet and exit on failure
          command: |
            pushd /tmp
            wget https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz
            sudo tar -xvf go$GO_VERSION.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo mv go /usr/local
            popd

            make go-mod-cache
            make build-linux
            make build-docker-terradnode
            make localnet-start

            CNT=0
            ITER=40
            SLEEP=5
            NUMBLOCKS=10
            NODEADDR=localhost

            while [ ${CNT} -lt $ITER ]; do
              var=$((curl -s --fail $NODEADDR:26657/status || echo "{\"result\":{\"sync_info\":{\"latest_block_height\":0}}}") | jq -r '.result.sync_info.latest_block_height')
              echo "Number of Blocks: ${var}"
              if [ ! -z ${var} ] && [ ${var} -gt ${NUMBLOCKS} ]; then
                echo "Number of blocks reached, exiting success..."
                exit 0
              fi
              let CNT=CNT+1
              sleep $SLEEP
            done

            echo "Timeout reached, exiting failure..."
            exit 1

workflows:
  version: 2
  build_and_push:
    jobs:
      - setup_dependencies: *filter_only_branches
      - lint:
          <<: *filter_only_branches
          requires:
            - setup_dependencies
      - test_cover:
          <<: *filter_only_branches
          requires:
            - setup_dependencies
      - localnet:
          <<: *filter_only_branches
      - docker_image:
          <<: *filter_only_branches
          requires:
            - setup_dependencies
      - push_to_ecr:
          <<: *filter_only_branches
          requires:
            - lint
            - docker_image
            - localnet
      - upload_coverage:
          <<: *filter_only_branches
          requires:
            - test_cover
      - release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
          requires:
            - lint
            - test_cover
            - localnet
