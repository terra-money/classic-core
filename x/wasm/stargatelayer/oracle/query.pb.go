// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/wasm/v1beta1/stargatelayer/oracle/query.proto

package oracle

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_terra_money_core_x_oracle_types "github.com/terra-money/core/x/oracle/types"
	types1 "github.com/terra-money/core/x/oracle/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryExchangeRateResponse is response type for the
// Query/ExchangeRate RPC method.
type QueryExchangeRateResponse struct {
	// exchange_rate defines the exchange rate of Luna denominated in various Terra
	ExchangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchange_rate"`
}

func (m *QueryExchangeRateResponse) Reset()         { *m = QueryExchangeRateResponse{} }
func (m *QueryExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateResponse) ProtoMessage()    {}
func (*QueryExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{0}
}
func (m *QueryExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateResponse.Merge(m, src)
}
func (m *QueryExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateResponse proto.InternalMessageInfo

// QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
type QueryExchangeRatesResponse struct {
	// exchange_rates defines a list of the exchange rate for all whitelisted denoms.
	ExchangeRates github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=exchange_rates,json=exchangeRates,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"exchange_rates"`
}

func (m *QueryExchangeRatesResponse) Reset()         { *m = QueryExchangeRatesResponse{} }
func (m *QueryExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesResponse) ProtoMessage()    {}
func (*QueryExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{1}
}
func (m *QueryExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesResponse.Merge(m, src)
}
func (m *QueryExchangeRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesResponse proto.InternalMessageInfo

func (m *QueryExchangeRatesResponse) GetExchangeRates() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.ExchangeRates
	}
	return nil
}

// QueryTobinTaxResponse is response type for the
// Query/TobinTax RPC method.
type QueryTobinTaxResponse struct {
	// tobin_taxe defines the tobin tax of a denom
	TobinTax github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=tobin_tax,json=tobinTax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tobin_tax"`
}

func (m *QueryTobinTaxResponse) Reset()         { *m = QueryTobinTaxResponse{} }
func (m *QueryTobinTaxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTobinTaxResponse) ProtoMessage()    {}
func (*QueryTobinTaxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{2}
}
func (m *QueryTobinTaxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTobinTaxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTobinTaxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTobinTaxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTobinTaxResponse.Merge(m, src)
}
func (m *QueryTobinTaxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTobinTaxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTobinTaxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTobinTaxResponse proto.InternalMessageInfo

// QueryTobinTaxesResponse is response type for the
// Query/TobinTaxes RPC method.
type QueryTobinTaxesResponse struct {
	// tobin_taxes defines a list of the tobin tax of all whitelisted denoms
	TobinTaxes github_com_terra_money_core_x_oracle_types.DenomList `protobuf:"bytes,1,rep,name=tobin_taxes,json=tobinTaxes,proto3,castrepeated=github.com/terra-money/core/x/oracle/types.DenomList" json:"tobin_taxes" yaml:"tobin_taxes"`
}

func (m *QueryTobinTaxesResponse) Reset()         { *m = QueryTobinTaxesResponse{} }
func (m *QueryTobinTaxesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTobinTaxesResponse) ProtoMessage()    {}
func (*QueryTobinTaxesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{3}
}
func (m *QueryTobinTaxesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTobinTaxesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTobinTaxesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTobinTaxesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTobinTaxesResponse.Merge(m, src)
}
func (m *QueryTobinTaxesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTobinTaxesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTobinTaxesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTobinTaxesResponse proto.InternalMessageInfo

func (m *QueryTobinTaxesResponse) GetTobinTaxes() github_com_terra_money_core_x_oracle_types.DenomList {
	if m != nil {
		return m.TobinTaxes
	}
	return nil
}

// QueryActivesResponse is response type for the
// Query/Actives RPC method.
type QueryActivesResponse struct {
	// actives defines a list of the denomination which oracle prices aggreed upon.
	Actives []string `protobuf:"bytes,1,rep,name=actives,proto3" json:"actives,omitempty"`
}

func (m *QueryActivesResponse) Reset()         { *m = QueryActivesResponse{} }
func (m *QueryActivesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActivesResponse) ProtoMessage()    {}
func (*QueryActivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{4}
}
func (m *QueryActivesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivesResponse.Merge(m, src)
}
func (m *QueryActivesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivesResponse proto.InternalMessageInfo

func (m *QueryActivesResponse) GetActives() []string {
	if m != nil {
		return m.Actives
	}
	return nil
}

// QueryVoteTargetsResponse is response type for the
// Query/VoteTargets RPC method.
type QueryVoteTargetsResponse struct {
	// vote_targets defines a list of the denomination in which everyone
	// should vote in the current vote period.
	VoteTargets []string `protobuf:"bytes,1,rep,name=vote_targets,json=voteTargets,proto3" json:"vote_targets,omitempty"`
}

func (m *QueryVoteTargetsResponse) Reset()         { *m = QueryVoteTargetsResponse{} }
func (m *QueryVoteTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoteTargetsResponse) ProtoMessage()    {}
func (*QueryVoteTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{5}
}
func (m *QueryVoteTargetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteTargetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteTargetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteTargetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteTargetsResponse.Merge(m, src)
}
func (m *QueryVoteTargetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteTargetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteTargetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteTargetsResponse proto.InternalMessageInfo

func (m *QueryVoteTargetsResponse) GetVoteTargets() []string {
	if m != nil {
		return m.VoteTargets
	}
	return nil
}

// QueryFeederDelegationResponse is response type for the
// Query/FeederDelegation RPC method.
type QueryFeederDelegationResponse struct {
	// feeder_addr defines the feeder delegation of a validator
	FeederAddr string `protobuf:"bytes,1,opt,name=feeder_addr,json=feederAddr,proto3" json:"feeder_addr,omitempty"`
}

func (m *QueryFeederDelegationResponse) Reset()         { *m = QueryFeederDelegationResponse{} }
func (m *QueryFeederDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegationResponse) ProtoMessage()    {}
func (*QueryFeederDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{6}
}
func (m *QueryFeederDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegationResponse.Merge(m, src)
}
func (m *QueryFeederDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegationResponse proto.InternalMessageInfo

func (m *QueryFeederDelegationResponse) GetFeederAddr() string {
	if m != nil {
		return m.FeederAddr
	}
	return ""
}

// QueryMissCounterResponse is response type for the
// Query/MissCounter RPC method.
type QueryMissCounterResponse struct {
	// miss_counter defines the oracle miss counter of a validator
	MissCounter uint64 `protobuf:"varint,1,opt,name=miss_counter,json=missCounter,proto3" json:"miss_counter,omitempty"`
}

func (m *QueryMissCounterResponse) Reset()         { *m = QueryMissCounterResponse{} }
func (m *QueryMissCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounterResponse) ProtoMessage()    {}
func (*QueryMissCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{7}
}
func (m *QueryMissCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounterResponse.Merge(m, src)
}
func (m *QueryMissCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounterResponse proto.InternalMessageInfo

func (m *QueryMissCounterResponse) GetMissCounter() uint64 {
	if m != nil {
		return m.MissCounter
	}
	return 0
}

// QueryAggregatePrevoteResponse is response type for the
// Query/AggregatePrevote RPC method.
type QueryAggregatePrevoteResponse struct {
	// aggregate_prevote defines oracle aggregate prevote submitted by a validator in the current vote period
	AggregatePrevote types1.AggregateExchangeRatePrevote `protobuf:"bytes,1,opt,name=aggregate_prevote,json=aggregatePrevote,proto3" json:"aggregate_prevote"`
}

func (m *QueryAggregatePrevoteResponse) Reset()         { *m = QueryAggregatePrevoteResponse{} }
func (m *QueryAggregatePrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregatePrevoteResponse) ProtoMessage()    {}
func (*QueryAggregatePrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{8}
}
func (m *QueryAggregatePrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregatePrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregatePrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregatePrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregatePrevoteResponse.Merge(m, src)
}
func (m *QueryAggregatePrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregatePrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregatePrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregatePrevoteResponse proto.InternalMessageInfo

func (m *QueryAggregatePrevoteResponse) GetAggregatePrevote() types1.AggregateExchangeRatePrevote {
	if m != nil {
		return m.AggregatePrevote
	}
	return types1.AggregateExchangeRatePrevote{}
}

// QueryAggregatePrevotesResponse is response type for the
// Query/AggregatePrevotes RPC method.
type QueryAggregatePrevotesResponse struct {
	// aggregate_prevotes defines all oracle aggregate prevotes submitted in the current vote period
	AggregatePrevotes []types1.AggregateExchangeRatePrevote `protobuf:"bytes,1,rep,name=aggregate_prevotes,json=aggregatePrevotes,proto3" json:"aggregate_prevotes"`
}

func (m *QueryAggregatePrevotesResponse) Reset()         { *m = QueryAggregatePrevotesResponse{} }
func (m *QueryAggregatePrevotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregatePrevotesResponse) ProtoMessage()    {}
func (*QueryAggregatePrevotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{9}
}
func (m *QueryAggregatePrevotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregatePrevotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregatePrevotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregatePrevotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregatePrevotesResponse.Merge(m, src)
}
func (m *QueryAggregatePrevotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregatePrevotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregatePrevotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregatePrevotesResponse proto.InternalMessageInfo

func (m *QueryAggregatePrevotesResponse) GetAggregatePrevotes() []types1.AggregateExchangeRatePrevote {
	if m != nil {
		return m.AggregatePrevotes
	}
	return nil
}

// QueryAggregateVoteResponse is response type for the
// Query/AggregateVote RPC method.
type QueryAggregateVoteResponse struct {
	// aggregate_vote defines oracle aggregate vote submitted by a validator in the current vote period
	AggregateVote types1.AggregateExchangeRateVote `protobuf:"bytes,1,opt,name=aggregate_vote,json=aggregateVote,proto3" json:"aggregate_vote"`
}

func (m *QueryAggregateVoteResponse) Reset()         { *m = QueryAggregateVoteResponse{} }
func (m *QueryAggregateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVoteResponse) ProtoMessage()    {}
func (*QueryAggregateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{10}
}
func (m *QueryAggregateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVoteResponse.Merge(m, src)
}
func (m *QueryAggregateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVoteResponse proto.InternalMessageInfo

func (m *QueryAggregateVoteResponse) GetAggregateVote() types1.AggregateExchangeRateVote {
	if m != nil {
		return m.AggregateVote
	}
	return types1.AggregateExchangeRateVote{}
}

// QueryAggregateVotesResponse is response type for the
// Query/AggregateVotes RPC method.
type QueryAggregateVotesResponse struct {
	// aggregate_votes defines all oracle aggregate votes submitted in the current vote period
	AggregateVotes []types1.AggregateExchangeRateVote `protobuf:"bytes,1,rep,name=aggregate_votes,json=aggregateVotes,proto3" json:"aggregate_votes"`
}

func (m *QueryAggregateVotesResponse) Reset()         { *m = QueryAggregateVotesResponse{} }
func (m *QueryAggregateVotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVotesResponse) ProtoMessage()    {}
func (*QueryAggregateVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{11}
}
func (m *QueryAggregateVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVotesResponse.Merge(m, src)
}
func (m *QueryAggregateVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVotesResponse proto.InternalMessageInfo

func (m *QueryAggregateVotesResponse) GetAggregateVotes() []types1.AggregateExchangeRateVote {
	if m != nil {
		return m.AggregateVotes
	}
	return nil
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params types1.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccfd61952ba77f3b, []int{12}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() types1.Params {
	if m != nil {
		return m.Params
	}
	return types1.Params{}
}

func init() {
	proto.RegisterType((*QueryExchangeRateResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryExchangeRateResponse")
	proto.RegisterType((*QueryExchangeRatesResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryExchangeRatesResponse")
	proto.RegisterType((*QueryTobinTaxResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryTobinTaxResponse")
	proto.RegisterType((*QueryTobinTaxesResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryTobinTaxesResponse")
	proto.RegisterType((*QueryActivesResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryActivesResponse")
	proto.RegisterType((*QueryVoteTargetsResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryVoteTargetsResponse")
	proto.RegisterType((*QueryFeederDelegationResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryFeederDelegationResponse")
	proto.RegisterType((*QueryMissCounterResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryMissCounterResponse")
	proto.RegisterType((*QueryAggregatePrevoteResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryAggregatePrevoteResponse")
	proto.RegisterType((*QueryAggregatePrevotesResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryAggregatePrevotesResponse")
	proto.RegisterType((*QueryAggregateVoteResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryAggregateVoteResponse")
	proto.RegisterType((*QueryAggregateVotesResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryAggregateVotesResponse")
	proto.RegisterType((*QueryParamsResponse)(nil), "terra.wasm.v1beta1.stargatelayer.oracle.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("terra/wasm/v1beta1/stargatelayer/oracle/query.proto", fileDescriptor_ccfd61952ba77f3b)
}

var fileDescriptor_ccfd61952ba77f3b = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcf, 0x4e, 0x14, 0x4b,
	0x14, 0xc6, 0xa7, 0x73, 0x09, 0xf7, 0x52, 0x03, 0xdc, 0xcb, 0x5c, 0x8c, 0x23, 0x60, 0x0f, 0xd4,
	0x42, 0x49, 0x0c, 0x5d, 0x02, 0x26, 0x26, 0x24, 0x26, 0x32, 0xa0, 0x1b, 0x35, 0x81, 0x96, 0xb0,
	0x30, 0xc6, 0x49, 0x4d, 0xf7, 0xb1, 0xe9, 0x38, 0xdd, 0xd5, 0x56, 0x15, 0xe3, 0x8c, 0x89, 0x5b,
	0x13, 0x77, 0xac, 0x7c, 0x08, 0xe2, 0x83, 0xb0, 0x64, 0x69, 0x5c, 0x80, 0x81, 0x37, 0xf0, 0x09,
	0x4c, 0x57, 0x55, 0xff, 0x19, 0x98, 0x18, 0x65, 0x05, 0x7d, 0xaa, 0xbe, 0xef, 0xfb, 0xd5, 0xa9,
	0xd3, 0xd3, 0x68, 0x55, 0x02, 0xe7, 0x94, 0xbc, 0xa3, 0x22, 0x22, 0xdd, 0xe5, 0x36, 0x48, 0xba,
	0x4c, 0x84, 0xa4, 0x3c, 0xa0, 0x12, 0x3a, 0xb4, 0x0f, 0x9c, 0x30, 0x4e, 0xbd, 0x0e, 0x90, 0xb7,
	0xfb, 0xc0, 0xfb, 0x4e, 0xc2, 0x99, 0x64, 0xb5, 0xdb, 0x4a, 0xe4, 0xa4, 0x22, 0xc7, 0x88, 0x9c,
	0x01, 0x91, 0xa3, 0x45, 0x33, 0xd3, 0x01, 0x0b, 0x98, 0xd2, 0x90, 0xf4, 0x3f, 0x2d, 0x9f, 0x99,
	0x0b, 0x18, 0x0b, 0x3a, 0x40, 0x68, 0x12, 0x12, 0x1a, 0xc7, 0x4c, 0x52, 0x19, 0xb2, 0x58, 0x98,
	0xd5, 0x05, 0x4d, 0x64, 0x62, 0x33, 0x26, 0xfd, 0x68, 0xb6, 0xd8, 0x1e, 0x13, 0x11, 0x13, 0xa4,
	0x4d, 0x45, 0xb1, 0xc3, 0x63, 0x61, 0xac, 0xd7, 0x71, 0x82, 0x6e, 0x6c, 0xa7, 0xb8, 0x8f, 0x7a,
	0xde, 0x1e, 0x8d, 0x03, 0x70, 0xa9, 0x04, 0x17, 0x44, 0xc2, 0x62, 0x01, 0xb5, 0xe7, 0x68, 0x02,
	0x4c, 0xbd, 0xc5, 0xa9, 0x84, 0xba, 0x35, 0x6f, 0x2d, 0x8e, 0x35, 0x9d, 0xa3, 0x93, 0x46, 0xe5,
	0xdb, 0x49, 0xe3, 0x56, 0x10, 0xca, 0xbd, 0xfd, 0xb6, 0xe3, 0xb1, 0x88, 0x98, 0x18, 0xfd, 0x67,
	0x49, 0xf8, 0x6f, 0x88, 0xec, 0x27, 0x20, 0x9c, 0x4d, 0xf0, 0xdc, 0x71, 0x28, 0x99, 0xe3, 0xcf,
	0x16, 0x9a, 0xb9, 0x14, 0x29, 0xf2, 0xcc, 0x1e, 0x9a, 0x1c, 0xc8, 0x14, 0x75, 0x6b, 0xfe, 0xaf,
	0xc5, 0xea, 0xca, 0x9c, 0xa3, 0xbd, 0x9d, 0xf4, 0x24, 0x79, 0x2b, 0x37, 0xc1, 0xdb, 0x60, 0x61,
	0xdc, 0x5c, 0x4d, 0x91, 0x0e, 0x4f, 0x1b, 0x77, 0x7e, 0x0f, 0x29, 0xd5, 0x08, 0x77, 0xa2, 0xcc,
	0x25, 0xb0, 0x8f, 0xae, 0x29, 0xae, 0x1d, 0xd6, 0x0e, 0xe3, 0x1d, 0xda, 0xcb, 0x91, 0x9e, 0xa0,
	0x31, 0x99, 0xd6, 0x5a, 0x92, 0xf6, 0xae, 0xd8, 0x82, 0x7f, 0xa4, 0x31, 0xc5, 0x5f, 0x2c, 0x74,
	0x7d, 0x20, 0xa6, 0x74, 0xf6, 0x03, 0x0b, 0x55, 0xf3, 0xa4, 0xfc, 0xe4, 0xb3, 0x8e, 0x9e, 0x21,
	0x73, 0xaf, 0xc5, 0xd1, 0x63, 0x16, 0x35, 0xdd, 0x14, 0xe4, 0xc7, 0x49, 0xa3, 0xd6, 0xa7, 0x51,
	0x67, 0x0d, 0x97, 0xd4, 0xf8, 0xf0, 0xb4, 0x71, 0xaf, 0x84, 0xa7, 0x4c, 0x96, 0x22, 0x16, 0x43,
	0x9f, 0x78, 0x8c, 0x03, 0xe9, 0x65, 0x83, 0x93, 0x61, 0xc6, 0x2c, 0x7a, 0x1a, 0x0a, 0xe9, 0x22,
	0x99, 0xa3, 0xe1, 0xbb, 0x68, 0x5a, 0xd1, 0xae, 0x7b, 0x32, 0xec, 0x96, 0x50, 0xeb, 0xe8, 0x6f,
	0xaa, 0x4b, 0x8a, 0x72, 0xcc, 0xcd, 0x1e, 0xf1, 0x03, 0x54, 0x57, 0x8a, 0x5d, 0x26, 0x61, 0x87,
	0xf2, 0x00, 0x64, 0xa1, 0x5a, 0x40, 0xe3, 0x5d, 0x26, 0xa1, 0x25, 0x75, 0xdd, 0x48, 0xab, 0xdd,
	0x62, 0x2b, 0x7e, 0x88, 0x6e, 0x2a, 0xf9, 0x63, 0x00, 0x1f, 0xf8, 0x26, 0x74, 0x20, 0x50, 0x33,
	0x9f, 0x7b, 0x34, 0x50, 0xf5, 0xb5, 0x5a, 0x6b, 0x51, 0xdf, 0xe7, 0xfa, 0x3e, 0x5c, 0xa4, 0x4b,
	0xeb, 0xbe, 0xcf, 0x73, 0x80, 0x67, 0xa1, 0x10, 0x1b, 0x6c, 0x3f, 0x96, 0xc0, 0xcb, 0x00, 0x51,
	0x28, 0x44, 0xcb, 0xd3, 0x75, 0xa5, 0x1e, 0x71, 0xab, 0x51, 0xb1, 0x15, 0x7f, 0xb4, 0x0c, 0xc1,
	0x7a, 0x10, 0xf0, 0x34, 0x1c, 0xb6, 0x38, 0xa4, 0x84, 0xb9, 0x09, 0xa0, 0x29, 0x9a, 0xad, 0xb5,
	0x12, 0xbd, 0xa8, 0x9c, 0xaa, 0x2b, 0x2b, 0xc3, 0xef, 0x2a, 0xb7, 0x2a, 0xcf, 0xbc, 0xb1, 0x6d,
	0x8e, 0xa4, 0x57, 0xe8, 0xfe, 0x47, 0x2f, 0xc4, 0xe1, 0x4f, 0x16, 0xb2, 0x87, 0x82, 0x14, 0xfd,
	0x0c, 0x50, 0xed, 0x12, 0x49, 0x36, 0x36, 0x57, 0x47, 0x99, 0xba, 0x88, 0x22, 0xf0, 0x7b, 0xf3,
	0xce, 0xe6, 0xea, 0xdd, 0x72, 0x43, 0x5e, 0xa2, 0xc9, 0x02, 0xa3, 0xd4, 0x0d, 0xf2, 0x07, 0x08,
	0xbb, 0x45, 0xfe, 0x04, 0x2d, 0xa7, 0xe0, 0x0f, 0x68, 0xf6, 0x72, 0x76, 0xd1, 0x83, 0x57, 0xe8,
	0xdf, 0xc1, 0xf0, 0xac, 0x01, 0x57, 0x4c, 0x9f, 0x1c, 0x48, 0x17, 0x78, 0x1b, 0xfd, 0xaf, 0xe2,
	0xb7, 0x28, 0xa7, 0x51, 0x11, 0xbb, 0x86, 0x46, 0x13, 0x55, 0x31, 0x67, 0x9d, 0x1b, 0x9e, 0xa6,
	0x55, 0xc6, 0xda, 0x28, 0x9a, 0xdb, 0x47, 0x67, 0xb6, 0x75, 0x7c, 0x66, 0x5b, 0xdf, 0xcf, 0x6c,
	0xeb, 0xe0, 0xdc, 0xae, 0x1c, 0x9f, 0xdb, 0x95, 0xaf, 0xe7, 0x76, 0xe5, 0xc5, 0xfd, 0x5f, 0xbf,
	0xb0, 0xea, 0xdb, 0x33, 0xec, 0x9b, 0xd3, 0x1e, 0x55, 0x3f, 0xe7, 0xab, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0xb8, 0xe7, 0x24, 0xa5, 0x06, 0x00, 0x00,
}

func (m *QueryExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExchangeRate.Size()
		i -= size
		if _, err := m.ExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for iNdEx := len(m.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTobinTaxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTobinTaxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTobinTaxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TobinTax.Size()
		i -= size
		if _, err := m.TobinTax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTobinTaxesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTobinTaxesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTobinTaxesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TobinTaxes) > 0 {
		for iNdEx := len(m.TobinTaxes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TobinTaxes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActivesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actives) > 0 {
		for iNdEx := len(m.Actives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actives[iNdEx])
			copy(dAtA[i:], m.Actives[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Actives[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteTargetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteTargetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteTargetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteTargets) > 0 {
		for iNdEx := len(m.VoteTargets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteTargets[iNdEx])
			copy(dAtA[i:], m.VoteTargets[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.VoteTargets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeederAddr) > 0 {
		i -= len(m.FeederAddr)
		copy(dAtA[i:], m.FeederAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeederAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissCounter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MissCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregatePrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregatePrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregatePrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregatePrevote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAggregatePrevotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregatePrevotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregatePrevotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregatePrevotes) > 0 {
		for iNdEx := len(m.AggregatePrevotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregatePrevotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregateVote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregateVotes) > 0 {
		for iNdEx := len(m.AggregateVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for _, e := range m.ExchangeRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTobinTaxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TobinTax.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTobinTaxesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TobinTaxes) > 0 {
		for _, e := range m.TobinTaxes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actives) > 0 {
		for _, s := range m.Actives {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVoteTargetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteTargets) > 0 {
		for _, s := range m.VoteTargets {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeederDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeederAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissCounter != 0 {
		n += 1 + sovQuery(uint64(m.MissCounter))
	}
	return n
}

func (m *QueryAggregatePrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AggregatePrevote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAggregatePrevotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregatePrevotes) > 0 {
		for _, e := range m.AggregatePrevotes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AggregateVote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAggregateVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregateVotes) > 0 {
		for _, e := range m.AggregateVotes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = append(m.ExchangeRates, types.DecCoin{})
			if err := m.ExchangeRates[len(m.ExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTobinTaxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTobinTaxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTobinTaxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobinTax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TobinTax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTobinTaxesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTobinTaxesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTobinTaxesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobinTaxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TobinTaxes = append(m.TobinTaxes, types1.Denom{})
			if err := m.TobinTaxes[len(m.TobinTaxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actives = append(m.Actives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteTargetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteTargetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteTargetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTargets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteTargets = append(m.VoteTargets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeederAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeederAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounter", wireType)
			}
			m.MissCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregatePrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregatePrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregatePrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatePrevote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregatePrevote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregatePrevotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregatePrevotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregatePrevotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatePrevotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatePrevotes = append(m.AggregatePrevotes, types1.AggregateExchangeRatePrevote{})
			if err := m.AggregatePrevotes[len(m.AggregatePrevotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregateVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateVotes = append(m.AggregateVotes, types1.AggregateExchangeRateVote{})
			if err := m.AggregateVotes[len(m.AggregateVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
